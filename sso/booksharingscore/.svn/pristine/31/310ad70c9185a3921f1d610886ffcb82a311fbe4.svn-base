package com.hidm.booksharingscore.security;

import java.util.ArrayList;
import java.util.List;

import org.apache.shiro.authc.AccountException;
import org.apache.shiro.authc.AuthenticationException;
import org.apache.shiro.authc.AuthenticationInfo;
import org.apache.shiro.authc.AuthenticationToken;
import org.apache.shiro.authc.SimpleAuthenticationInfo;
import org.apache.shiro.authc.UsernamePasswordToken;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hidm.booksharingscore.controller.LoginController;
import com.hidm.booksharingscore.entity.User;
import com.hidm.booksharingscore.service.UserService;


@Service(value = "customRealm")
public class CustomRealm extends AuthorizingRealm {
	private static final Logger log = LoggerFactory.getLogger(LoginController.class);
    // 设置realm的名称
    @Override
    public void setName(String name) {
        super.setName("customRealm");
    }
    
    @Autowired
    private UserService userService;
    

    /**
     * 认证
     */
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
        // token中包含用户输入的用户名和密码
        // 第一步从token中取出用户名
        UsernamePasswordToken upToken = (UsernamePasswordToken) token;
        String userName = upToken.getUsername();
        String password = new String(upToken.getPassword());
        
        User user = new User();
        user.setUserName(userName);
        user.setPassword(password);
        
        List<User> users = null;
        users = userService.selectUser(user);
        if (null != users) {
            log.info("登陆成功！ userName:" + userName);
     
            AuthenticationInfo authcInfo = new SimpleAuthenticationInfo(users.get(0), password, this.getName());
            return authcInfo;
        } else {
            throw new AccountException("帐号或密码不正确！");
        }
    
    }

    /**
     * 授权,只有成功通过<span style="font-family: Arial, Helvetica,
     * sans-serif;">doGetAuthenticationInfo方法的认证后才会执行。</span>
     */
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection principals) {
        // 从 principals获取主身份信息
        // 将getPrimaryPrincipal方法返回值转为真实身份类型（在上边的doGetAuthenticationInfo认证通过填充到SimpleAuthenticationInfo中身份类型），
        User user = (User) principals.getPrimaryPrincipal();
        // 单独定一个集合对象
        List<String> roles = new ArrayList<String>();
        if (user == null) {
            return null;
        }
        
        if("E101258".equals(user.getUserName()) || "E100008".equals(user.getUserName())) {
        	roles.add("admin");
        }else {
        	roles.add("user");
        }
        
        // 查到权限数据，返回授权信息(要包括 上边的permissions)
        SimpleAuthorizationInfo simpleAuthorizationInfo = new SimpleAuthorizationInfo();
        simpleAuthorizationInfo.addRoles(roles);
        return simpleAuthorizationInfo;
    }
}
